name: Continuous Deployment to GCP [Linux]

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  deploy-infrastructure:
    if: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Set Environment Variables from GitHub Secrets
        run: |
          echo "TF_LOG=debug" >> $GITHUB_ENV
          echo "TF_VAR_PROJECT_ID=${{ vars.PROJECT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_CLOUD_REGION=${{ vars.CLOUD_REGION }}" >> $GITHUB_ENV
          echo "TF_VAR_ZONE=${{ vars.ZONE }}" >> $GITHUB_ENV
          echo "TF_VAR_SERVICE_NAME=${{ vars.SERVICE_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_IMAGE_URL=${{ vars.IMAGE_URL }}" >> $GITHUB_ENV
          echo "TF_VAR_MEILISEARCH_MASTER_KEY=${{ secrets.MEILISEARCH_MASTER_KEY }}" >> $GITHUB_ENV
          echo "TF_VAR_MEILISEARCH_NO_ANALYTICS=${{ secrets.MEILISEARCH_NO_ANALYTICS }}" >> $GITHUB_ENV
          echo "TF_VAR_MEILISEARCH_ENV=${{ secrets.MEILISEARCH_ENV }}" >> $GITHUB_ENV
          echo "TF_VAR_TZ=${{ vars.TZ }}" >> $GITHUB_ENV

      - name: Terraform Version
        run: terraform -version

      - name: Terraform Init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: terraform init

      - name: Terraform validate
        run: |
          terraform validate

      - name: Verify Terraform Providers
        run: |
          terraform providers lock -platform=windows_amd64 -platform=darwin_amd64 -platform=linux_amd64 -platform=darwin_arm64 -platform=linux_arm64

      - name: Create secrets.tfvars
        run: |
          echo "project_id=\"$TF_VAR_PROJECT_ID\"" > secrets.tfvars
          echo "cloud_region=\"$TF_VAR_CLOUD_REGION\"" >> secrets.tfvars
          echo "zone=\"$TF_VAR_ZONE\"" >> secrets.tfvars
          echo "service_name=\"$TF_VAR_SERVICE_NAME\"" >> secrets.tfvars
          echo "image_url=\"$TF_VAR_IMAGE_URL\"" >> secrets.tfvars
          echo "meilisearch_host=\"$TF_VAR_MEILISEARCH_HOST\"" >> secrets.tfvars
          echo "meilisearch_master_key=\"$TF_VAR_MEILISEARCH_MASTER_KEY\"" >> secrets.tfvars
          echo "meilisearch_no_analytics=\"$TF_VAR_MEILISEARCH_NO_ANALYTICS\"" >> secrets.tfvars
          echo "meilisearch_env=\"$TF_VAR_MEILISEARCH_ENV\"" >> secrets.tfvars
          echo "tz=\"$TF_VAR_TZ\"" >> secrets.tfvars

      - name: Terraform Destroy
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform destroy -auto-approve -var-file=secrets.tfvars

      - name: Terraform Refresh
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform refresh -var-file=secrets.tfvars

      - name: Terraform State List
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform state list

      - name: Terraform Plan
        id: plan
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform plan -out=tfplan.out -var-file=secrets.tfvars

      - name: Terraform Apply
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          terraform apply -auto-approve tfplan.out

  build-and-run:
    # needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Setup Go environment
        uses: actions/setup-go@v5.0.0
        with:
          check-latest: true
          cache: true
          go-version: 1.22.2
      
      - name: Set Environment Variables from GitHub Secrets
        working-directory: ./etl-go
        run: |
          echo "MEILISEARCH_HOST=${{ secrets.MEILISEARCH_HOST }}" > .env
          echo "MEILISEARCH_MASTER_KEY=${{ secrets.MEILISEARCH_MASTER_KEY }}" >> .env
          echo "MONGODB_URL=${{ secrets.MONGODB_URL }}" >> .env
          echo "MONGODB_DATABASE=${{ secrets.MONGODB_DATABASE }}" >> .env
          echo "MONGODB_USER=${{ secrets.MONGODB_USER }}" >> .env
          echo "MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }}" >> .env
          echo "LOG_LEVEL=${{ vars.LOG_LEVEL }}" >> .env

      - name: Call Runner Script
        working-directory: ./etl-go
        run: |
          sed -i 's/\r//' runner.sh
          sudo chmod +x runner.sh
          ./runner.sh

      - name: Check for changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "SHOULD_I_COMMIT=Yes" >> $GITHUB_ENV
          else
            echo "SHOULD_I_COMMIT=No" >> $GITHUB_ENV
          fi
  
      - name: Commit the changes
        if: ${{ env.SHOULD_I_COMMIT == 'Yes' }}
        run: |
          git config advice.ignoredHook false
          git config pull.rebase false
          git config --local user.email "action@github.com"
          git config --local user.name "Continuous Deployment"
          git add -A
          git commit -m "cd(etl-go): persist the etl-go program"
          git pull origin main

      - name: Push the changes
        if: ${{ env.SHOULD_I_COMMIT == 'Yes' }}
        uses: ad-m/github-push-action@master
        with:
          # To push to a protected branch, it is essential to utilize a personal access token.
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          branch: main
          force_with_lease: true
